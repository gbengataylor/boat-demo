apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    alpha.image.policy.openshift.io/resolve-names: '*'
    app.openshift.io/vcs-ref: master
    app.openshift.io/vcs-uri: https://github.com/redhat-naps-da/boat-detect/
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"boat-detect:latest","namespace":"boats-demo"},"fieldPath":"spec.template.spec.containers[?(@.name==\"boat-detect\")].image","pause":"false"}]'
  labels:
    app: boat-detect
    app.kubernetes.io/component: boat-detect
    app.kubernetes.io/instance: boat-detect
    app.kubernetes.io/name: python
    app.kubernetes.io/part-of: detection
    app.openshift.io/runtime: python
    app.openshift.io/runtime-version: 3.8-ubi8
  name: boat-detect
  namespace: boats-demo
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: boat-detect
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: boat-detect
        deploymentconfig: boat-detect
    spec:
      containers:
        - image: image-registry.openshift-image-registry.svc:5000/boats-demo/boat-detect:latest
        imagePullPolicy: Always
        name: boat-detect
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
